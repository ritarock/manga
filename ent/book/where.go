// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ritarock/manga/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsbn, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// Publisher applies equality check predicate on the "publisher" field. It's identical to PublisherEQ.
func Publisher(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisher, v))
}

// Pubdate applies equality check predicate on the "pubdate" field. It's identical to PubdateEQ.
func Pubdate(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPubdate, v))
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCover, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// SubjectCode applies equality check predicate on the "subject_code" field. It's identical to SubjectCodeEQ.
func SubjectCode(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldSubjectCode, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnIsNil applies the IsNil predicate on the "isbn" field.
func IsbnIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldIsbn))
}

// IsbnNotNil applies the NotNil predicate on the "isbn" field.
func IsbnNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldIsbn))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldIsbn, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTitle, v))
}

// PublisherEQ applies the EQ predicate on the "publisher" field.
func PublisherEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisher, v))
}

// PublisherNEQ applies the NEQ predicate on the "publisher" field.
func PublisherNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublisher, v))
}

// PublisherIn applies the In predicate on the "publisher" field.
func PublisherIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublisher, vs...))
}

// PublisherNotIn applies the NotIn predicate on the "publisher" field.
func PublisherNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublisher, vs...))
}

// PublisherGT applies the GT predicate on the "publisher" field.
func PublisherGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublisher, v))
}

// PublisherGTE applies the GTE predicate on the "publisher" field.
func PublisherGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublisher, v))
}

// PublisherLT applies the LT predicate on the "publisher" field.
func PublisherLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublisher, v))
}

// PublisherLTE applies the LTE predicate on the "publisher" field.
func PublisherLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublisher, v))
}

// PublisherContains applies the Contains predicate on the "publisher" field.
func PublisherContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPublisher, v))
}

// PublisherHasPrefix applies the HasPrefix predicate on the "publisher" field.
func PublisherHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPublisher, v))
}

// PublisherHasSuffix applies the HasSuffix predicate on the "publisher" field.
func PublisherHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPublisher, v))
}

// PublisherIsNil applies the IsNil predicate on the "publisher" field.
func PublisherIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPublisher))
}

// PublisherNotNil applies the NotNil predicate on the "publisher" field.
func PublisherNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPublisher))
}

// PublisherEqualFold applies the EqualFold predicate on the "publisher" field.
func PublisherEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPublisher, v))
}

// PublisherContainsFold applies the ContainsFold predicate on the "publisher" field.
func PublisherContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPublisher, v))
}

// PubdateEQ applies the EQ predicate on the "pubdate" field.
func PubdateEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPubdate, v))
}

// PubdateNEQ applies the NEQ predicate on the "pubdate" field.
func PubdateNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPubdate, v))
}

// PubdateIn applies the In predicate on the "pubdate" field.
func PubdateIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPubdate, vs...))
}

// PubdateNotIn applies the NotIn predicate on the "pubdate" field.
func PubdateNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPubdate, vs...))
}

// PubdateGT applies the GT predicate on the "pubdate" field.
func PubdateGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPubdate, v))
}

// PubdateGTE applies the GTE predicate on the "pubdate" field.
func PubdateGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPubdate, v))
}

// PubdateLT applies the LT predicate on the "pubdate" field.
func PubdateLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPubdate, v))
}

// PubdateLTE applies the LTE predicate on the "pubdate" field.
func PubdateLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPubdate, v))
}

// PubdateContains applies the Contains predicate on the "pubdate" field.
func PubdateContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPubdate, v))
}

// PubdateHasPrefix applies the HasPrefix predicate on the "pubdate" field.
func PubdateHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPubdate, v))
}

// PubdateHasSuffix applies the HasSuffix predicate on the "pubdate" field.
func PubdateHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPubdate, v))
}

// PubdateIsNil applies the IsNil predicate on the "pubdate" field.
func PubdateIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPubdate))
}

// PubdateNotNil applies the NotNil predicate on the "pubdate" field.
func PubdateNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPubdate))
}

// PubdateEqualFold applies the EqualFold predicate on the "pubdate" field.
func PubdateEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPubdate, v))
}

// PubdateContainsFold applies the ContainsFold predicate on the "pubdate" field.
func PubdateContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPubdate, v))
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCover, v))
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCover, v))
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCover, vs...))
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCover, vs...))
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCover, v))
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCover, v))
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCover, v))
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCover, v))
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldCover, v))
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldCover, v))
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldCover, v))
}

// CoverIsNil applies the IsNil predicate on the "cover" field.
func CoverIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldCover))
}

// CoverNotNil applies the NotNil predicate on the "cover" field.
func CoverNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldCover))
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldCover, v))
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldCover, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorIsNil applies the IsNil predicate on the "author" field.
func AuthorIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldAuthor))
}

// AuthorNotNil applies the NotNil predicate on the "author" field.
func AuthorNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldAuthor))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldAuthor, v))
}

// SubjectCodeEQ applies the EQ predicate on the "subject_code" field.
func SubjectCodeEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldSubjectCode, v))
}

// SubjectCodeNEQ applies the NEQ predicate on the "subject_code" field.
func SubjectCodeNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldSubjectCode, v))
}

// SubjectCodeIn applies the In predicate on the "subject_code" field.
func SubjectCodeIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldSubjectCode, vs...))
}

// SubjectCodeNotIn applies the NotIn predicate on the "subject_code" field.
func SubjectCodeNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldSubjectCode, vs...))
}

// SubjectCodeGT applies the GT predicate on the "subject_code" field.
func SubjectCodeGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldSubjectCode, v))
}

// SubjectCodeGTE applies the GTE predicate on the "subject_code" field.
func SubjectCodeGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldSubjectCode, v))
}

// SubjectCodeLT applies the LT predicate on the "subject_code" field.
func SubjectCodeLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldSubjectCode, v))
}

// SubjectCodeLTE applies the LTE predicate on the "subject_code" field.
func SubjectCodeLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldSubjectCode, v))
}

// SubjectCodeContains applies the Contains predicate on the "subject_code" field.
func SubjectCodeContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldSubjectCode, v))
}

// SubjectCodeHasPrefix applies the HasPrefix predicate on the "subject_code" field.
func SubjectCodeHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldSubjectCode, v))
}

// SubjectCodeHasSuffix applies the HasSuffix predicate on the "subject_code" field.
func SubjectCodeHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldSubjectCode, v))
}

// SubjectCodeIsNil applies the IsNil predicate on the "subject_code" field.
func SubjectCodeIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldSubjectCode))
}

// SubjectCodeNotNil applies the NotNil predicate on the "subject_code" field.
func SubjectCodeNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldSubjectCode))
}

// SubjectCodeEqualFold applies the EqualFold predicate on the "subject_code" field.
func SubjectCodeEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldSubjectCode, v))
}

// SubjectCodeContainsFold applies the ContainsFold predicate on the "subject_code" field.
func SubjectCodeContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldSubjectCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		p(s.Not())
	})
}
