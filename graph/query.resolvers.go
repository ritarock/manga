package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"github.com/ritarock/manga/ent/book"
	"github.com/ritarock/manga/graph/model"
)

// BooksByTitle is the resolver for the booksByTitle field.
func (r *queryResolver) BooksByTitle(ctx context.Context, input string) ([]*model.Book, error) {
	books := []*model.Book{}
	searched := r.EntClient.Book.Query().
		Where(func(s *sql.Selector) {
			s.Where(sql.Like(book.FieldTitle, "%"+input+"%"))
		}).AllX(ctx)
	for _, book := range searched {
		books = append(books, &model.Book{
			ID:          strconv.Itoa(book.ID),
			Isbn:        book.Isbn,
			Title:       book.Title,
			Publisher:   book.Publisher,
			Pubdate:     book.Pubdate,
			Cover:       book.Cover,
			Author:      book.Author,
			SubjectCode: book.SubjectCode,
		})
	}
	return books, nil
}

// BooksByAuthor is the resolver for the booksByAuthor field.
func (r *queryResolver) BooksByAuthor(ctx context.Context, input string) ([]*model.Book, error) {
	books := []*model.Book{}
	searched := r.EntClient.Book.Query().
		Where(func(s *sql.Selector) {
			s.Where(sql.Like(book.FieldAuthor, "%"+input+"%"))
		}).AllX(ctx)
	for _, book := range searched {
		books = append(books, &model.Book{
			ID:          strconv.Itoa(book.ID),
			Isbn:        book.Isbn,
			Title:       book.Title,
			Publisher:   book.Publisher,
			Pubdate:     book.Pubdate,
			Cover:       book.Cover,
			Author:      book.Author,
			SubjectCode: book.SubjectCode,
		})
	}
	return books, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
